// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String   @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?  @db.Text
  access_token      String?  @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?  @db.Text
  session_state     String?
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?

  accounts      Account[]
  sessions      Session[]
  credits       Int       @default(200)

  projects      UserToProject[] 
  questions     Question[]     
}

model Project {
  id          String    @id @default(cuid())
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  name        String
  githubUrl   String?   
  deletedAt   DateTime?
  indexingStatus String    @default("PENDING")
  commits     Commit[]
  users       UserToProject[] 
  questions   Question[]      
  meetings    Meeting[]
}

model UserToProject {
  id          String   @id @default(cuid())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  userId      String
  projectId   String

  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  project     Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@unique([userId, projectId])
  @@index([userId])
  @@index([projectId])
}

model Meeting {
  id          String        @id @default(cuid())
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  name        String
  meetingUrl  String        // S3 storage URL
  projectId   String
  status      MeetingStatus @default(PROCESSING)

  project     Project       @relation(fields: [projectId], references: [id], onDelete: Cascade)
  issues      Issue[]       

  @@index([projectId])
}

model Issue {
  id          String   @id @default(cuid())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  start       String   
  end         String   
  gist        String
  headline    String
  summary     String   @db.Text 

  meetingId   String
  meeting     Meeting  @relation(fields: [meetingId], references: [id], onDelete: Cascade)

  @@index([meetingId])
}

enum MeetingStatus {
  PROCESSING
  COMPLETED
}

model Question {
  id              String   @id @default(cuid())
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  question        String   @db.Text // Larger text field
  answer          String   @db.Text
  filesReferences Json?

  projectId       String
  userId          String

  project         Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([projectId])
  @@index([userId])
}

model Commit {
  id                  String   @id @default(cuid())
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt

  projectId           String
  commitMessage       String   @db.Text // Larger text field
  commitHash          String   
  commitAuthorName    String
  commitAuthorAvatar  String?
  commitDate          DateTime
  summary             String   @db.Text // Larger text field

  project             Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@index([projectId])
  @@index([commitHash])
}